"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[613],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,y=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1611:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},l="$WRLD Commands Plugin",u={unversionedId:"payments/wrld-payments-commands",id:"payments/wrld-payments-commands",isDocsHomePage:!1,title:"$WRLD Commands Plugin",description:"The WRLD Commands Plugin provides an interface for the WRLD Payments API through Minecraft commands. This is useful for a number of scenarios:",source:"@site/docs/payments/wrld-payments-commands.md",sourceDirName:"payments",slug:"/payments/wrld-payments-commands",permalink:"/payments/wrld-payments-commands",editUrl:"https://github.com/NFT-Worlds/dev.nftworlds.com/edit/main/docs/payments/wrld-payments-commands.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"$WRLD Payments API Plugin",permalink:"/payments/wrld-payments-api"},next:{title:"Tutorial: Creating and processing transactions",permalink:"/payments/tx-flow"}},c=[{value:"Features",id:"features",children:[{value:"Manually creating a server-to-player payment request",id:"manually-creating-a-server-to-player-payment-request",children:[],level:3},{value:"Viewing pending transactions",id:"viewing-pending-transactions",children:[],level:3},{value:"Manually confirming a transaction",id:"manually-confirming-a-transaction",children:[],level:3}],level:2}],m={toc:c};function p(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"wrld-commands-plugin"},"$WRLD Commands Plugin"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NFT-Worlds/wrld-payment-tester-plugin"},"WRLD Commands Plugin")," provides an interface for the WRLD Payments API through Minecraft commands. This is useful for a number of scenarios:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"It allows you to create payment requests without writing a Java plugin. This means you can integrate the WRLD Payments API with command blocks, Citizens NPCs, and more!"),(0,i.kt)("li",{parentName:"ol"},"Developing and testing custom integrations without repeatedly sending real transactions.")),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("h3",{id:"manually-creating-a-server-to-player-payment-request"},"Manually creating a server-to-player payment request"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage"),": /createrequest ","<","amount",">"," ","<","reason",">"),(0,i.kt)("h3",{id:"viewing-pending-transactions"},"Viewing pending transactions"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage"),": /listrequests"),(0,i.kt)("p",null,"For example, if your world has three pending requests with values 25, 0.25, and 2.0 WRLD the output of this command would display:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"listrequests output",src:n(4601).Z})),(0,i.kt)("h3",{id:"manually-confirming-a-transaction"},"Manually confirming a transaction"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage"),": /simulatetx ","<","id",">","\nDuring the process of building a $WRLD integration, you likely want to rapidly test your transaction handlers without sending a real transaction on Polygon each time. The WRLD Commands plugin makes this easy! Run the above command and provide the short ID for the pending transaction to simulate a sucessful payment."))}p.isMDXComponent=!0},4601:function(e,t,n){t.Z=n.p+"assets/images/listrequests-25a1c313f4c1d2c1e7b6118b80950be9.png"}}]);