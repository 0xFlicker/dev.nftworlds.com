"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[512],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(y,o(o({ref:t},p),{},{components:n})):a.createElement(y,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7837:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:3},s="Tutorial: Creating and processing transactions",c={unversionedId:"payments/tx-flow",id:"payments/tx-flow",isDocsHomePage:!1,title:"Tutorial: Creating and processing transactions",description:"This article will describe the lifecycle of a transaction as it's created and processed by a Spigot plugin written in Java. For an overview of how $WRLD payments work, refer to this section.",source:"@site/docs/payments/tx-flow.md",sourceDirName:"payments",slug:"/payments/tx-flow",permalink:"/payments/tx-flow",editUrl:"https://github.com/NFT-Worlds/dev.nftworlds.com/edit/main/docs/payments/tx-flow.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"$WRLD Commands Plugin",permalink:"/payments/wrld-payments-commands"},next:{title:"Selling Plots of Land for $WRLD",permalink:"/example-projects/plots"}},p=[{value:"Creating plugin, initializing wallet",id:"creating-plugin-initializing-wallet",children:[],level:2},{value:"Defining transaction types",id:"defining-transaction-types",children:[],level:2},{value:"Creating a payment request",id:"creating-a-payment-request",children:[],level:2},{value:"Writing a transaction handler",id:"writing-a-transaction-handler",children:[],level:2},{value:"Player Wallets &amp; Live Payment Testing",id:"player-wallets--live-payment-testing",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tutorial-creating-and-processing-transactions"},"Tutorial: Creating and processing transactions"),(0,i.kt)("p",null,"This article will describe the lifecycle of a transaction as it's created and processed by a Spigot plugin written in Java. For an overview of how $WRLD payments work, refer to ",(0,i.kt)("a",{parentName:"p",href:"/architecture/arch#wrld-token-interaction-example"},"this section"),"."),(0,i.kt)("h2",{id:"creating-plugin-initializing-wallet"},"Creating plugin, initializing wallet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"public class WRLDPaymentsCommands extends JavaPlugin {\n    private static WRLDPaymentsCommands plugin;\n    private static WalletAPI wallet;\n\n    public static WRLDPaymentsCommands getInstance() {\n        return plugin;\n    }\n    public static WalletAPI getPayments() {\n        return wallet;\n    }\n\n    public void onEnable() {\n        plugin = this;\n        wallet = new WalletAPI();\n\n        // We create this event handler below\n        getServer().getPluginManager().registerEvents(new PlayerTransactEventListener(), this);\n\n    }\n}\n")),(0,i.kt)("h2",{id:"defining-transaction-types"},"Defining transaction types"),(0,i.kt)("p",null,"Create a new enumerable to store your different transaction types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"public enum ExampleTransactionType {\n    PLAYER_BUY_APPLE_FROM_WORLD,\n    PLAYER_BUY_XP_FROM_WORLD,\n}\n")),(0,i.kt)("p",null,"Note: these are the example transactions included in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NFT-Worlds/wrld-payment-tester-plugin"},"WRLD Commands Plugin"),"."),(0,i.kt)("h2",{id:"creating-a-payment-request"},"Creating a payment request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"WRLDPaymentsCommands.getPayments().getNFTPlayer(player).requestWRLD(\n    25, Network.POLYGON, ExampleTransactionType.PLAYER_BUY_APPLE_FROM_WORLD.toString()\n);\n")),(0,i.kt)("a",{href:"/payments-javadoc/com/nftworlds/wallet/objects/NFTPlayer.html",target:"_blank"},"Javadocs for this example"),(0,i.kt)("h2",{id:"writing-a-transaction-handler"},"Writing a transaction handler"),(0,i.kt)("p",null,"Incoming transactions are processed by a Spigot event handler like the one below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import com.nftworlds.wallet.event.PlayerTransactEvent;\nimport org.bukkit.ChatColor;\nimport org.bukkit.Material;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.inventory.ItemStack;\n\npublic class PlayerTransactEventListener implements Listener {\n    @EventHandler\n    public void onPlayerTransactEvent(PlayerTransactEvent event) {\n        WRLDPaymentsCommands.getInstance().getLogger().info(event.getReason() + " exe");\n        try {\n            ExampleTransactionType type = ExampleTransactionType.valueOf(event.getReason());\n            switch (type) {\n                case PLAYER_BUY_APPLE_FROM_WORLD -> playerBuyAppleFromWorld(event);\n                case PLAYER_BUY_XP_FROM_WORLD -> playerBuyXPFromWorld(event);\n            }\n        } catch (IllegalArgumentException e) {\n            WRLDPaymentsCommands.getInstance().getLogger().warning("Received transaction type not in transaction type enum.");\n        }\n    }\n\n    private void playerBuyAppleFromWorld(PlayerTransactEvent event) {\n        event.getPlayer().getInventory().addItem(new ItemStack(Material.APPLE));\n        event.getPlayer().sendMessage(ChatColor.GOLD + "Purchase complete! Enjoy your apple!");\n    }\n\n    private void playerBuyXPFromWorld(PlayerTransactEvent event) {\n        event.getPlayer().giveExp(1000);\n        event.getPlayer().sendMessage(ChatColor.GOLD + "Purchase complete! You\'ve gained some XP.");\n    }\n}\n')),(0,i.kt)("h2",{id:"player-wallets--live-payment-testing"},"Player Wallets & Live Payment Testing"),(0,i.kt)("p",null,"If you want to test live payments, you need to connect your wallet that will spend $WRLD to your Minecraft account for NFT Worlds. You can do that through your NFT Worlds account page: ",(0,i.kt)("a",{parentName:"p",href:"https://nftworlds.com/login"},"https://nftworlds.com/login")),(0,i.kt)("p",null,"Connecting your wallet allows the NFT Worlds ecosystem to globally recognize your player UUID and the wallet address(es) associated with it. This is how payment receipt & the target player who paid is determined by the wrld payments api."))}m.isMDXComponent=!0}}]);